{
  "posts": [
    {
      "id": 1,
      "title": "json-server",
      "author": "typicode"
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  },
  "tasks": [
    {
      "task": "DSA",
      "id": 1
    },
    {
      "task": "repeat Flatiron phase 2 coding challenge",
      "id": 2
    },
    {
      "task": "graph traversal",
      "id": 3
    },
    {
      "task": "review testing unit, integration, e2e using Jest",
      "id": 4
    },
    {
      "task": "repeat Flatiron phase 1 vanilla JS coding challenge",
      "id": 5
    },
    {
      "task": "review data modeling (this time from front end or back end for front end rather than ruby",
      "id": 6
    },
    {
      "task": " string manipulation including reversal, palindrome, capital/lowercase, integer to string and back",
      "id": 7
    },
    {
      "task": "review Magento",
      "id": 8
    },
    {
      "task": "review GraphQL and learn basics commands and installation",
      "id": 9
    },
    {
      "task": "review Docker including how to install and how it differs from Kubernetes",
      "id": 10
    },
    {
      "task": "frontend Podcast with expert",
      "id": 11
    },
    {
      "task": "review react hooks",
      "id": 12
    },
    {
      "task": "research react lifecycle methods and practice",
      "id": 13
    },
    {
      "task": "React practice assessment",
      "id": 14
    },
    {
      "task": "review interview best practices",
      "id": 15
    },
    {
      "task": "testing, edge cases",
      "id": 16
    },
    {
      "task": "how to approach Greefield Solution because React is so open ended - libraries, architecture, ect",
      "id": 17
    },
    {
      "task": "concurrency",
      "id": 18
    },
    {
      "task": "graph traversal",
      "id": 19
    },
    {
      "task": "leetcode 1 hour DSA",
      "id": 20
    },
    {
      "task": "leetcode 1 graph traversal",
      "id": 21
    },
    {
      "task": "Big O overview",
      "id": 22
    },
    {
      "task": "Big O practice",
      "id": 23
    },
    {
      "task": "Build tic tac toe",
      "id": 24
    },
    {
      "id": 25
    },
    {
      "id": 26
    },
    {
      "id": 27
    },
    {
      "id": 28
    },
    {
      "id": 29
    },
    {
      "id": 30
    },
    {
      "id": 31
    },
    {
      "id": 32
    },
    {
      "id": 33
    },
    {
      "id": 34
    },
    {
      "id": 35
    },
    {
      "id": 36
    },
    {
      "id": 37
    },
    {
      "id": 38
    },
    {
      "id": 39
    },
    {
      "id": 40
    },
    {
      "id": 41
    },
    {
      "id": 42
    },
    {
      "id": 43
    },
    {
      "id": 44
    },
    {
      "id": 45
    },
    {
      "id": 46
    },
    {
      "id": 47
    },
    {
      "id": 48
    },
    {
      "id": 49
    },
    {
      "id": 50
    },
    {
      "id": 51
    },
    {
      "id": 52
    },
    {
      "id": 53
    },
    {
      "id": 54
    },
    {
      "id": 55
    },
    {
      "id": 56
    },
    {
      "id": 57
    },
    {
      "id": 58
    },
    {
      "id": 59
    },
    {
      "id": 60
    },
    {
      "id": 61
    },
    {
      "id": 62
    },
    {
      "id": 63
    },
    {
      "id": 64
    },
    {
      "id": 65
    },
    {
      "id": 66
    },
    {
      "id": 67
    },
    {
      "id": 68
    },
    {
      "id": 69
    },
    {
      "id": 70
    },
    {
      "id": 71
    },
    {
      "id": 72
    },
    {
      "id": 73
    },
    {
      "id": 74
    },
    {
      "id": 75
    },
    {
      "id": 76
    },
    {
      "id": 77
    },
    {
      "id": 78
    },
    {
      "id": 79
    },
    {
      "id": 80
    },
    {
      "id": 81
    },
    {
      "id": 82
    },
    {
      "id": 83
    },
    {
      "id": 84
    },
    {
      "id": 85
    },
    {
      "id": 86
    },
    {
      "id": 87
    },
    {
      "id": 88
    },
    {
      "id": 89
    },
    {
      "id": 90
    },
    {
      "id": 91
    },
    {
      "id": 92
    },
    {
      "id": 93
    },
    {
      "id": 94
    },
    {
      "id": 95
    },
    {
      "id": 96
    },
    {
      "id": 97
    },
    {
      "id": 98
    },
    {
      "id": 99
    },
    {
      "id": 100
    },
    {
      "id": 101
    },
    {
      "id": 102
    },
    {
      "id": 103
    },
    {
      "id": 104
    },
    {
      "id": 105
    },
    {
      "id": 106
    },
    {
      "id": 107
    },
    {
      "id": 108
    },
    {
      "id": 109
    },
    {
      "id": 110
    },
    {
      "id": 111
    },
    {
      "id": 112
    },
    {
      "id": 113
    },
    {
      "id": 114
    },
    {
      "id": 115
    },
    {
      "id": 116
    },
    {
      "id": 117
    },
    {
      "id": 118
    },
    {
      "id": 119
    },
    {
      "id": 120
    },
    {
      "id": 121
    },
    {
      "id": 122
    },
    {
      "id": 123
    },
    {
      "id": 124
    },
    {
      "id": 125
    },
    {
      "id": 126
    },
    {
      "id": 127
    },
    {
      "id": 128
    }
  ],
  "hooks": [
    {
      "hook": "useState",
      "function": "const [variable, setVariable = useState()",
      "uses": "keep track of value of variables between function calls (same as using this.state.) React preserves the variables. Can keep track of objects, strings, numbers, any data type"
    },
    {
      "hook": "useEffect",
      "function": "useEffect(()=> {function}, []) also common, useEffect(()=> {fetch(url).then(response=>response.json().then(setterFunction(variable) ",
      "uses": "fetch data, allows us to access count state variable inside the component or any props from the effect, its in the function of the scopt. It runs after first render and every update, so you may need to customize "
    },
    {
      "hook": "useContext",
      "function": "Const value = useContext(MyContext);",
      "uses": "Accepts a context object -the value returned from React.createContext - and returns the current context value. determined by the value of prop of the nearest <MyContext.Provider> above the calling component in the tree. Dont forget that the argument to useContext must be the context object itself. useContext(MyContext)"
    },
    {
      "hook": "useReducer",
      "function": "Const [state, dispatch] = useReducer(reducer, initialArg, init);",
      "uses": "alternative to useState, accepts a reducer of type (state, action)=>newState, returns current state paired with dispatch method, similar to reduc. Good to optimize performance, share data widely, logic involves multiple subvalues (to avoid passing props over and over. "
    }
  ]
}